# source: http://localhost:4466/indebrau-database/prod
# timestamp: Sat Jan 04 2020 18:11:45 GMT+0100 (Central European Standard Time)

type AggregateboilHopAddition {
  count: Int!
}

type AggregateBrewingProcess {
  count: Int!
}

type AggregateBrewingProcessDetails {
  count: Int!
}

type AggregatedryHopAddition {
  count: Int!
}

type AggregateGraph {
  count: Int!
}

type AggregateGraphData {
  count: Int!
}

type AggregateIngredient {
  count: Int!
}

type AggregateMediaFile {
  count: Int!
}

type AggregateMediaStream {
  count: Int!
}

type AggregateStep {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type boilHopAddition implements Node {
  id: ID!
  hop: Ingredient!
  minutesAfterBoilStart: Int!
}

"""A connection to a list of items."""
type boilHopAdditionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [boilHopAdditionEdge]!
  aggregate: AggregateboilHopAddition!
}

input boilHopAdditionCreateInput {
  id: ID
  minutesAfterBoilStart: Int!
  hop: IngredientCreateOneInput!
}

input boilHopAdditionCreateManyInput {
  create: [boilHopAdditionCreateInput!]
  connect: [boilHopAdditionWhereUniqueInput!]
}

"""An edge in a connection."""
type boilHopAdditionEdge {
  """The item at the end of the edge."""
  node: boilHopAddition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum boilHopAdditionOrderByInput {
  id_ASC
  id_DESC
  minutesAfterBoilStart_ASC
  minutesAfterBoilStart_DESC
}

type boilHopAdditionPreviousValues {
  id: ID!
  minutesAfterBoilStart: Int!
}

input boilHopAdditionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [boilHopAdditionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [boilHopAdditionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [boilHopAdditionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  minutesAfterBoilStart: Int

  """All values that are not equal to given value."""
  minutesAfterBoilStart_not: Int

  """All values that are contained in given list."""
  minutesAfterBoilStart_in: [Int!]

  """All values that are not contained in given list."""
  minutesAfterBoilStart_not_in: [Int!]

  """All values less than the given value."""
  minutesAfterBoilStart_lt: Int

  """All values less than or equal the given value."""
  minutesAfterBoilStart_lte: Int

  """All values greater than the given value."""
  minutesAfterBoilStart_gt: Int

  """All values greater than or equal the given value."""
  minutesAfterBoilStart_gte: Int
}

type boilHopAdditionSubscriptionPayload {
  mutation: MutationType!
  node: boilHopAddition
  updatedFields: [String!]
  previousValues: boilHopAdditionPreviousValues
}

input boilHopAdditionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [boilHopAdditionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [boilHopAdditionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [boilHopAdditionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: boilHopAdditionWhereInput
}

input boilHopAdditionUpdateDataInput {
  minutesAfterBoilStart: Int
  hop: IngredientUpdateOneRequiredInput
}

input boilHopAdditionUpdateInput {
  minutesAfterBoilStart: Int
  hop: IngredientUpdateOneRequiredInput
}

input boilHopAdditionUpdateManyDataInput {
  minutesAfterBoilStart: Int
}

input boilHopAdditionUpdateManyInput {
  create: [boilHopAdditionCreateInput!]
  connect: [boilHopAdditionWhereUniqueInput!]
  set: [boilHopAdditionWhereUniqueInput!]
  disconnect: [boilHopAdditionWhereUniqueInput!]
  delete: [boilHopAdditionWhereUniqueInput!]
  update: [boilHopAdditionUpdateWithWhereUniqueNestedInput!]
  updateMany: [boilHopAdditionUpdateManyWithWhereNestedInput!]
  deleteMany: [boilHopAdditionScalarWhereInput!]
  upsert: [boilHopAdditionUpsertWithWhereUniqueNestedInput!]
}

input boilHopAdditionUpdateManyMutationInput {
  minutesAfterBoilStart: Int
}

input boilHopAdditionUpdateManyWithWhereNestedInput {
  where: boilHopAdditionScalarWhereInput!
  data: boilHopAdditionUpdateManyDataInput!
}

input boilHopAdditionUpdateWithWhereUniqueNestedInput {
  where: boilHopAdditionWhereUniqueInput!
  data: boilHopAdditionUpdateDataInput!
}

input boilHopAdditionUpsertWithWhereUniqueNestedInput {
  where: boilHopAdditionWhereUniqueInput!
  update: boilHopAdditionUpdateDataInput!
  create: boilHopAdditionCreateInput!
}

input boilHopAdditionWhereInput {
  """Logical AND on all given filters."""
  AND: [boilHopAdditionWhereInput!]

  """Logical OR on all given filters."""
  OR: [boilHopAdditionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [boilHopAdditionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  minutesAfterBoilStart: Int

  """All values that are not equal to given value."""
  minutesAfterBoilStart_not: Int

  """All values that are contained in given list."""
  minutesAfterBoilStart_in: [Int!]

  """All values that are not contained in given list."""
  minutesAfterBoilStart_not_in: [Int!]

  """All values less than the given value."""
  minutesAfterBoilStart_lt: Int

  """All values less than or equal the given value."""
  minutesAfterBoilStart_lte: Int

  """All values greater than the given value."""
  minutesAfterBoilStart_gt: Int

  """All values greater than or equal the given value."""
  minutesAfterBoilStart_gte: Int
  hop: IngredientWhereInput
}

input boilHopAdditionWhereUniqueInput {
  id: ID
}

type BrewingProcess implements Node {
  id: ID!
  name: String!
  description: String!
  activeSteps: [BrewingStep!]!
  brewingProcessDetails: BrewingProcessDetails!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  mediaStreams(where: MediaStreamWhereInput, orderBy: MediaStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MediaStream!]
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
}

"""A connection to a list of items."""
type BrewingProcessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrewingProcessEdge]!
  aggregate: AggregateBrewingProcess!
}

input BrewingProcessCreateactiveStepsInput {
  set: [BrewingStep!]
}

input BrewingProcessCreateInput {
  id: ID
  name: String!
  description: String!
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessCreateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsCreateOneInput!
  graphs: GraphCreateManyWithoutBrewingProcessInput
  users: UserCreateManyWithoutParticipatingBrewingProcessesInput
  mediaStreams: MediaStreamCreateManyWithoutBrewingProcessInput
}

input BrewingProcessCreateManyWithoutUsersInput {
  create: [BrewingProcessCreateWithoutUsersInput!]
  connect: [BrewingProcessWhereUniqueInput!]
}

input BrewingProcessCreateOneWithoutGraphsInput {
  create: BrewingProcessCreateWithoutGraphsInput
  connect: BrewingProcessWhereUniqueInput
}

input BrewingProcessCreateOneWithoutMediaStreamsInput {
  create: BrewingProcessCreateWithoutMediaStreamsInput
  connect: BrewingProcessWhereUniqueInput
}

input BrewingProcessCreateWithoutGraphsInput {
  id: ID
  name: String!
  description: String!
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessCreateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsCreateOneInput!
  users: UserCreateManyWithoutParticipatingBrewingProcessesInput
  mediaStreams: MediaStreamCreateManyWithoutBrewingProcessInput
}

input BrewingProcessCreateWithoutMediaStreamsInput {
  id: ID
  name: String!
  description: String!
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessCreateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsCreateOneInput!
  graphs: GraphCreateManyWithoutBrewingProcessInput
  users: UserCreateManyWithoutParticipatingBrewingProcessesInput
}

input BrewingProcessCreateWithoutUsersInput {
  id: ID
  name: String!
  description: String!
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessCreateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsCreateOneInput!
  graphs: GraphCreateManyWithoutBrewingProcessInput
  mediaStreams: MediaStreamCreateManyWithoutBrewingProcessInput
}

type BrewingProcessDetails implements Node {
  id: ID!
  malts(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  yeast: Ingredient!
  mashWaterLiter: Float!
  spargingWaterLiter: Float!
  yieldsLiter: Float!
  carbonizationGramPerLiter: Float!
  mashInTemperature: Float!
  mashSteps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step!]
  spargingTemperature: Float!
  boilingMinutes: Int!
  boilHopAdditions(where: boilHopAdditionWhereInput, orderBy: boilHopAdditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [boilHopAddition!]
  dryHopping: dryHopAddition
  fermentationSteps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step!]
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
}

"""A connection to a list of items."""
type BrewingProcessDetailsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BrewingProcessDetailsEdge]!
  aggregate: AggregateBrewingProcessDetails!
}

input BrewingProcessDetailsCreateInput {
  id: ID
  mashWaterLiter: Float!
  spargingWaterLiter: Float!
  yieldsLiter: Float!
  carbonizationGramPerLiter: Float!
  mashInTemperature: Float!
  spargingTemperature: Float!
  boilingMinutes: Int!
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
  malts: IngredientCreateManyInput
  yeast: IngredientCreateOneInput!
  mashSteps: StepCreateManyInput
  boilHopAdditions: boilHopAdditionCreateManyInput
  dryHopping: dryHopAdditionCreateOneInput
  fermentationSteps: StepCreateManyInput
}

input BrewingProcessDetailsCreateOneInput {
  create: BrewingProcessDetailsCreateInput
  connect: BrewingProcessDetailsWhereUniqueInput
}

"""An edge in a connection."""
type BrewingProcessDetailsEdge {
  """The item at the end of the edge."""
  node: BrewingProcessDetails!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrewingProcessDetailsOrderByInput {
  id_ASC
  id_DESC
  mashWaterLiter_ASC
  mashWaterLiter_DESC
  spargingWaterLiter_ASC
  spargingWaterLiter_DESC
  yieldsLiter_ASC
  yieldsLiter_DESC
  carbonizationGramPerLiter_ASC
  carbonizationGramPerLiter_DESC
  mashInTemperature_ASC
  mashInTemperature_DESC
  spargingTemperature_ASC
  spargingTemperature_DESC
  boilingMinutes_ASC
  boilingMinutes_DESC
  originalExtractPlato_ASC
  originalExtractPlato_DESC
  pitchingTemperature_ASC
  pitchingTemperature_DESC
  alcoholPercent_ASC
  alcoholPercent_DESC
  conditioningDays_ASC
  conditioningDays_DESC
}

type BrewingProcessDetailsPreviousValues {
  id: ID!
  mashWaterLiter: Float!
  spargingWaterLiter: Float!
  yieldsLiter: Float!
  carbonizationGramPerLiter: Float!
  mashInTemperature: Float!
  spargingTemperature: Float!
  boilingMinutes: Int!
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
}

type BrewingProcessDetailsSubscriptionPayload {
  mutation: MutationType!
  node: BrewingProcessDetails
  updatedFields: [String!]
  previousValues: BrewingProcessDetailsPreviousValues
}

input BrewingProcessDetailsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewingProcessDetailsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewingProcessDetailsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewingProcessDetailsSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrewingProcessDetailsWhereInput
}

input BrewingProcessDetailsUpdateDataInput {
  mashWaterLiter: Float
  spargingWaterLiter: Float
  yieldsLiter: Float
  carbonizationGramPerLiter: Float
  mashInTemperature: Float
  spargingTemperature: Float
  boilingMinutes: Int
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
  malts: IngredientUpdateManyInput
  yeast: IngredientUpdateOneRequiredInput
  mashSteps: StepUpdateManyInput
  boilHopAdditions: boilHopAdditionUpdateManyInput
  dryHopping: dryHopAdditionUpdateOneInput
  fermentationSteps: StepUpdateManyInput
}

input BrewingProcessDetailsUpdateInput {
  mashWaterLiter: Float
  spargingWaterLiter: Float
  yieldsLiter: Float
  carbonizationGramPerLiter: Float
  mashInTemperature: Float
  spargingTemperature: Float
  boilingMinutes: Int
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
  malts: IngredientUpdateManyInput
  yeast: IngredientUpdateOneRequiredInput
  mashSteps: StepUpdateManyInput
  boilHopAdditions: boilHopAdditionUpdateManyInput
  dryHopping: dryHopAdditionUpdateOneInput
  fermentationSteps: StepUpdateManyInput
}

input BrewingProcessDetailsUpdateManyMutationInput {
  mashWaterLiter: Float
  spargingWaterLiter: Float
  yieldsLiter: Float
  carbonizationGramPerLiter: Float
  mashInTemperature: Float
  spargingTemperature: Float
  boilingMinutes: Int
  originalExtractPlato: Float
  pitchingTemperature: Float
  alcoholPercent: Float
  conditioningDays: Int
}

input BrewingProcessDetailsUpdateOneRequiredInput {
  create: BrewingProcessDetailsCreateInput
  connect: BrewingProcessDetailsWhereUniqueInput
  update: BrewingProcessDetailsUpdateDataInput
  upsert: BrewingProcessDetailsUpsertNestedInput
}

input BrewingProcessDetailsUpsertNestedInput {
  update: BrewingProcessDetailsUpdateDataInput!
  create: BrewingProcessDetailsCreateInput!
}

input BrewingProcessDetailsWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewingProcessDetailsWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewingProcessDetailsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewingProcessDetailsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mashWaterLiter: Float

  """All values that are not equal to given value."""
  mashWaterLiter_not: Float

  """All values that are contained in given list."""
  mashWaterLiter_in: [Float!]

  """All values that are not contained in given list."""
  mashWaterLiter_not_in: [Float!]

  """All values less than the given value."""
  mashWaterLiter_lt: Float

  """All values less than or equal the given value."""
  mashWaterLiter_lte: Float

  """All values greater than the given value."""
  mashWaterLiter_gt: Float

  """All values greater than or equal the given value."""
  mashWaterLiter_gte: Float
  spargingWaterLiter: Float

  """All values that are not equal to given value."""
  spargingWaterLiter_not: Float

  """All values that are contained in given list."""
  spargingWaterLiter_in: [Float!]

  """All values that are not contained in given list."""
  spargingWaterLiter_not_in: [Float!]

  """All values less than the given value."""
  spargingWaterLiter_lt: Float

  """All values less than or equal the given value."""
  spargingWaterLiter_lte: Float

  """All values greater than the given value."""
  spargingWaterLiter_gt: Float

  """All values greater than or equal the given value."""
  spargingWaterLiter_gte: Float
  yieldsLiter: Float

  """All values that are not equal to given value."""
  yieldsLiter_not: Float

  """All values that are contained in given list."""
  yieldsLiter_in: [Float!]

  """All values that are not contained in given list."""
  yieldsLiter_not_in: [Float!]

  """All values less than the given value."""
  yieldsLiter_lt: Float

  """All values less than or equal the given value."""
  yieldsLiter_lte: Float

  """All values greater than the given value."""
  yieldsLiter_gt: Float

  """All values greater than or equal the given value."""
  yieldsLiter_gte: Float
  carbonizationGramPerLiter: Float

  """All values that are not equal to given value."""
  carbonizationGramPerLiter_not: Float

  """All values that are contained in given list."""
  carbonizationGramPerLiter_in: [Float!]

  """All values that are not contained in given list."""
  carbonizationGramPerLiter_not_in: [Float!]

  """All values less than the given value."""
  carbonizationGramPerLiter_lt: Float

  """All values less than or equal the given value."""
  carbonizationGramPerLiter_lte: Float

  """All values greater than the given value."""
  carbonizationGramPerLiter_gt: Float

  """All values greater than or equal the given value."""
  carbonizationGramPerLiter_gte: Float
  mashInTemperature: Float

  """All values that are not equal to given value."""
  mashInTemperature_not: Float

  """All values that are contained in given list."""
  mashInTemperature_in: [Float!]

  """All values that are not contained in given list."""
  mashInTemperature_not_in: [Float!]

  """All values less than the given value."""
  mashInTemperature_lt: Float

  """All values less than or equal the given value."""
  mashInTemperature_lte: Float

  """All values greater than the given value."""
  mashInTemperature_gt: Float

  """All values greater than or equal the given value."""
  mashInTemperature_gte: Float
  spargingTemperature: Float

  """All values that are not equal to given value."""
  spargingTemperature_not: Float

  """All values that are contained in given list."""
  spargingTemperature_in: [Float!]

  """All values that are not contained in given list."""
  spargingTemperature_not_in: [Float!]

  """All values less than the given value."""
  spargingTemperature_lt: Float

  """All values less than or equal the given value."""
  spargingTemperature_lte: Float

  """All values greater than the given value."""
  spargingTemperature_gt: Float

  """All values greater than or equal the given value."""
  spargingTemperature_gte: Float
  boilingMinutes: Int

  """All values that are not equal to given value."""
  boilingMinutes_not: Int

  """All values that are contained in given list."""
  boilingMinutes_in: [Int!]

  """All values that are not contained in given list."""
  boilingMinutes_not_in: [Int!]

  """All values less than the given value."""
  boilingMinutes_lt: Int

  """All values less than or equal the given value."""
  boilingMinutes_lte: Int

  """All values greater than the given value."""
  boilingMinutes_gt: Int

  """All values greater than or equal the given value."""
  boilingMinutes_gte: Int
  originalExtractPlato: Float

  """All values that are not equal to given value."""
  originalExtractPlato_not: Float

  """All values that are contained in given list."""
  originalExtractPlato_in: [Float!]

  """All values that are not contained in given list."""
  originalExtractPlato_not_in: [Float!]

  """All values less than the given value."""
  originalExtractPlato_lt: Float

  """All values less than or equal the given value."""
  originalExtractPlato_lte: Float

  """All values greater than the given value."""
  originalExtractPlato_gt: Float

  """All values greater than or equal the given value."""
  originalExtractPlato_gte: Float
  pitchingTemperature: Float

  """All values that are not equal to given value."""
  pitchingTemperature_not: Float

  """All values that are contained in given list."""
  pitchingTemperature_in: [Float!]

  """All values that are not contained in given list."""
  pitchingTemperature_not_in: [Float!]

  """All values less than the given value."""
  pitchingTemperature_lt: Float

  """All values less than or equal the given value."""
  pitchingTemperature_lte: Float

  """All values greater than the given value."""
  pitchingTemperature_gt: Float

  """All values greater than or equal the given value."""
  pitchingTemperature_gte: Float
  alcoholPercent: Float

  """All values that are not equal to given value."""
  alcoholPercent_not: Float

  """All values that are contained in given list."""
  alcoholPercent_in: [Float!]

  """All values that are not contained in given list."""
  alcoholPercent_not_in: [Float!]

  """All values less than the given value."""
  alcoholPercent_lt: Float

  """All values less than or equal the given value."""
  alcoholPercent_lte: Float

  """All values greater than the given value."""
  alcoholPercent_gt: Float

  """All values greater than or equal the given value."""
  alcoholPercent_gte: Float
  conditioningDays: Int

  """All values that are not equal to given value."""
  conditioningDays_not: Int

  """All values that are contained in given list."""
  conditioningDays_in: [Int!]

  """All values that are not contained in given list."""
  conditioningDays_not_in: [Int!]

  """All values less than the given value."""
  conditioningDays_lt: Int

  """All values less than or equal the given value."""
  conditioningDays_lte: Int

  """All values greater than the given value."""
  conditioningDays_gt: Int

  """All values greater than or equal the given value."""
  conditioningDays_gte: Int
  malts_every: IngredientWhereInput
  malts_some: IngredientWhereInput
  malts_none: IngredientWhereInput
  yeast: IngredientWhereInput
  mashSteps_every: StepWhereInput
  mashSteps_some: StepWhereInput
  mashSteps_none: StepWhereInput
  boilHopAdditions_every: boilHopAdditionWhereInput
  boilHopAdditions_some: boilHopAdditionWhereInput
  boilHopAdditions_none: boilHopAdditionWhereInput
  dryHopping: dryHopAdditionWhereInput
  fermentationSteps_every: StepWhereInput
  fermentationSteps_some: StepWhereInput
  fermentationSteps_none: StepWhereInput
}

input BrewingProcessDetailsWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type BrewingProcessEdge {
  """The item at the end of the edge."""
  node: BrewingProcess!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BrewingProcessOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  heatingUpStart_ASC
  heatingUpStart_DESC
  mashIn_ASC
  mashIn_DESC
  boilingStart_ASC
  boilingStart_DESC
  fermentationStart_ASC
  fermentationStart_DESC
}

type BrewingProcessPreviousValues {
  id: ID!
  name: String!
  description: String!
  activeSteps: [BrewingStep!]!
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
}

input BrewingProcessScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewingProcessScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewingProcessScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewingProcessScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  heatingUpStart: DateTime

  """All values that are not equal to given value."""
  heatingUpStart_not: DateTime

  """All values that are contained in given list."""
  heatingUpStart_in: [DateTime!]

  """All values that are not contained in given list."""
  heatingUpStart_not_in: [DateTime!]

  """All values less than the given value."""
  heatingUpStart_lt: DateTime

  """All values less than or equal the given value."""
  heatingUpStart_lte: DateTime

  """All values greater than the given value."""
  heatingUpStart_gt: DateTime

  """All values greater than or equal the given value."""
  heatingUpStart_gte: DateTime
  mashIn: DateTime

  """All values that are not equal to given value."""
  mashIn_not: DateTime

  """All values that are contained in given list."""
  mashIn_in: [DateTime!]

  """All values that are not contained in given list."""
  mashIn_not_in: [DateTime!]

  """All values less than the given value."""
  mashIn_lt: DateTime

  """All values less than or equal the given value."""
  mashIn_lte: DateTime

  """All values greater than the given value."""
  mashIn_gt: DateTime

  """All values greater than or equal the given value."""
  mashIn_gte: DateTime
  boilingStart: DateTime

  """All values that are not equal to given value."""
  boilingStart_not: DateTime

  """All values that are contained in given list."""
  boilingStart_in: [DateTime!]

  """All values that are not contained in given list."""
  boilingStart_not_in: [DateTime!]

  """All values less than the given value."""
  boilingStart_lt: DateTime

  """All values less than or equal the given value."""
  boilingStart_lte: DateTime

  """All values greater than the given value."""
  boilingStart_gt: DateTime

  """All values greater than or equal the given value."""
  boilingStart_gte: DateTime
  fermentationStart: DateTime

  """All values that are not equal to given value."""
  fermentationStart_not: DateTime

  """All values that are contained in given list."""
  fermentationStart_in: [DateTime!]

  """All values that are not contained in given list."""
  fermentationStart_not_in: [DateTime!]

  """All values less than the given value."""
  fermentationStart_lt: DateTime

  """All values less than or equal the given value."""
  fermentationStart_lte: DateTime

  """All values greater than the given value."""
  fermentationStart_gt: DateTime

  """All values greater than or equal the given value."""
  fermentationStart_gte: DateTime
}

type BrewingProcessSubscriptionPayload {
  mutation: MutationType!
  node: BrewingProcess
  updatedFields: [String!]
  previousValues: BrewingProcessPreviousValues
}

input BrewingProcessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewingProcessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewingProcessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewingProcessSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BrewingProcessWhereInput
}

input BrewingProcessUpdateactiveStepsInput {
  set: [BrewingStep!]
}

input BrewingProcessUpdateInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsUpdateOneRequiredInput
  graphs: GraphUpdateManyWithoutBrewingProcessInput
  users: UserUpdateManyWithoutParticipatingBrewingProcessesInput
  mediaStreams: MediaStreamUpdateManyWithoutBrewingProcessInput
}

input BrewingProcessUpdateManyDataInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
}

input BrewingProcessUpdateManyMutationInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
}

input BrewingProcessUpdateManyWithoutUsersInput {
  create: [BrewingProcessCreateWithoutUsersInput!]
  connect: [BrewingProcessWhereUniqueInput!]
  set: [BrewingProcessWhereUniqueInput!]
  disconnect: [BrewingProcessWhereUniqueInput!]
  delete: [BrewingProcessWhereUniqueInput!]
  update: [BrewingProcessUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [BrewingProcessUpdateManyWithWhereNestedInput!]
  deleteMany: [BrewingProcessScalarWhereInput!]
  upsert: [BrewingProcessUpsertWithWhereUniqueWithoutUsersInput!]
}

input BrewingProcessUpdateManyWithWhereNestedInput {
  where: BrewingProcessScalarWhereInput!
  data: BrewingProcessUpdateManyDataInput!
}

input BrewingProcessUpdateOneRequiredWithoutGraphsInput {
  create: BrewingProcessCreateWithoutGraphsInput
  connect: BrewingProcessWhereUniqueInput
  update: BrewingProcessUpdateWithoutGraphsDataInput
  upsert: BrewingProcessUpsertWithoutGraphsInput
}

input BrewingProcessUpdateOneRequiredWithoutMediaStreamsInput {
  create: BrewingProcessCreateWithoutMediaStreamsInput
  connect: BrewingProcessWhereUniqueInput
  update: BrewingProcessUpdateWithoutMediaStreamsDataInput
  upsert: BrewingProcessUpsertWithoutMediaStreamsInput
}

input BrewingProcessUpdateWithoutGraphsDataInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsUpdateOneRequiredInput
  users: UserUpdateManyWithoutParticipatingBrewingProcessesInput
  mediaStreams: MediaStreamUpdateManyWithoutBrewingProcessInput
}

input BrewingProcessUpdateWithoutMediaStreamsDataInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsUpdateOneRequiredInput
  graphs: GraphUpdateManyWithoutBrewingProcessInput
  users: UserUpdateManyWithoutParticipatingBrewingProcessesInput
}

input BrewingProcessUpdateWithoutUsersDataInput {
  name: String
  description: String
  start: DateTime
  end: DateTime
  heatingUpStart: DateTime
  mashIn: DateTime
  boilingStart: DateTime
  fermentationStart: DateTime
  activeSteps: BrewingProcessUpdateactiveStepsInput
  brewingProcessDetails: BrewingProcessDetailsUpdateOneRequiredInput
  graphs: GraphUpdateManyWithoutBrewingProcessInput
  mediaStreams: MediaStreamUpdateManyWithoutBrewingProcessInput
}

input BrewingProcessUpdateWithWhereUniqueWithoutUsersInput {
  where: BrewingProcessWhereUniqueInput!
  data: BrewingProcessUpdateWithoutUsersDataInput!
}

input BrewingProcessUpsertWithoutGraphsInput {
  update: BrewingProcessUpdateWithoutGraphsDataInput!
  create: BrewingProcessCreateWithoutGraphsInput!
}

input BrewingProcessUpsertWithoutMediaStreamsInput {
  update: BrewingProcessUpdateWithoutMediaStreamsDataInput!
  create: BrewingProcessCreateWithoutMediaStreamsInput!
}

input BrewingProcessUpsertWithWhereUniqueWithoutUsersInput {
  where: BrewingProcessWhereUniqueInput!
  update: BrewingProcessUpdateWithoutUsersDataInput!
  create: BrewingProcessCreateWithoutUsersInput!
}

input BrewingProcessWhereInput {
  """Logical AND on all given filters."""
  AND: [BrewingProcessWhereInput!]

  """Logical OR on all given filters."""
  OR: [BrewingProcessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BrewingProcessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  heatingUpStart: DateTime

  """All values that are not equal to given value."""
  heatingUpStart_not: DateTime

  """All values that are contained in given list."""
  heatingUpStart_in: [DateTime!]

  """All values that are not contained in given list."""
  heatingUpStart_not_in: [DateTime!]

  """All values less than the given value."""
  heatingUpStart_lt: DateTime

  """All values less than or equal the given value."""
  heatingUpStart_lte: DateTime

  """All values greater than the given value."""
  heatingUpStart_gt: DateTime

  """All values greater than or equal the given value."""
  heatingUpStart_gte: DateTime
  mashIn: DateTime

  """All values that are not equal to given value."""
  mashIn_not: DateTime

  """All values that are contained in given list."""
  mashIn_in: [DateTime!]

  """All values that are not contained in given list."""
  mashIn_not_in: [DateTime!]

  """All values less than the given value."""
  mashIn_lt: DateTime

  """All values less than or equal the given value."""
  mashIn_lte: DateTime

  """All values greater than the given value."""
  mashIn_gt: DateTime

  """All values greater than or equal the given value."""
  mashIn_gte: DateTime
  boilingStart: DateTime

  """All values that are not equal to given value."""
  boilingStart_not: DateTime

  """All values that are contained in given list."""
  boilingStart_in: [DateTime!]

  """All values that are not contained in given list."""
  boilingStart_not_in: [DateTime!]

  """All values less than the given value."""
  boilingStart_lt: DateTime

  """All values less than or equal the given value."""
  boilingStart_lte: DateTime

  """All values greater than the given value."""
  boilingStart_gt: DateTime

  """All values greater than or equal the given value."""
  boilingStart_gte: DateTime
  fermentationStart: DateTime

  """All values that are not equal to given value."""
  fermentationStart_not: DateTime

  """All values that are contained in given list."""
  fermentationStart_in: [DateTime!]

  """All values that are not contained in given list."""
  fermentationStart_not_in: [DateTime!]

  """All values less than the given value."""
  fermentationStart_lt: DateTime

  """All values less than or equal the given value."""
  fermentationStart_lte: DateTime

  """All values greater than the given value."""
  fermentationStart_gt: DateTime

  """All values greater than or equal the given value."""
  fermentationStart_gte: DateTime
  brewingProcessDetails: BrewingProcessDetailsWhereInput
  graphs_every: GraphWhereInput
  graphs_some: GraphWhereInput
  graphs_none: GraphWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  mediaStreams_every: MediaStreamWhereInput
  mediaStreams_some: MediaStreamWhereInput
  mediaStreams_none: MediaStreamWhereInput
}

input BrewingProcessWhereUniqueInput {
  id: ID
}

enum BrewingStep {
  MALT_CRUSHING
  HEATING_UP
  MASH_IN
  MASHING
  HEATING_SPARGE
  LAUTERING
  SPARGING
  BOILING
  CHILLING
  FERMENTING
  CONDITIONING
  BOTTLED
}

scalar DateTime

type dryHopAddition implements Node {
  id: ID!
  hop: Ingredient!
  addedOn: DateTime
}

"""A connection to a list of items."""
type dryHopAdditionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [dryHopAdditionEdge]!
  aggregate: AggregatedryHopAddition!
}

input dryHopAdditionCreateInput {
  id: ID
  addedOn: DateTime
  hop: IngredientCreateOneInput!
}

input dryHopAdditionCreateOneInput {
  create: dryHopAdditionCreateInput
  connect: dryHopAdditionWhereUniqueInput
}

"""An edge in a connection."""
type dryHopAdditionEdge {
  """The item at the end of the edge."""
  node: dryHopAddition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum dryHopAdditionOrderByInput {
  id_ASC
  id_DESC
  addedOn_ASC
  addedOn_DESC
}

type dryHopAdditionPreviousValues {
  id: ID!
  addedOn: DateTime
}

type dryHopAdditionSubscriptionPayload {
  mutation: MutationType!
  node: dryHopAddition
  updatedFields: [String!]
  previousValues: dryHopAdditionPreviousValues
}

input dryHopAdditionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [dryHopAdditionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [dryHopAdditionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [dryHopAdditionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: dryHopAdditionWhereInput
}

input dryHopAdditionUpdateDataInput {
  addedOn: DateTime
  hop: IngredientUpdateOneRequiredInput
}

input dryHopAdditionUpdateInput {
  addedOn: DateTime
  hop: IngredientUpdateOneRequiredInput
}

input dryHopAdditionUpdateManyMutationInput {
  addedOn: DateTime
}

input dryHopAdditionUpdateOneInput {
  create: dryHopAdditionCreateInput
  connect: dryHopAdditionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: dryHopAdditionUpdateDataInput
  upsert: dryHopAdditionUpsertNestedInput
}

input dryHopAdditionUpsertNestedInput {
  update: dryHopAdditionUpdateDataInput!
  create: dryHopAdditionCreateInput!
}

input dryHopAdditionWhereInput {
  """Logical AND on all given filters."""
  AND: [dryHopAdditionWhereInput!]

  """Logical OR on all given filters."""
  OR: [dryHopAdditionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [dryHopAdditionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedOn: DateTime

  """All values that are not equal to given value."""
  addedOn_not: DateTime

  """All values that are contained in given list."""
  addedOn_in: [DateTime!]

  """All values that are not contained in given list."""
  addedOn_not_in: [DateTime!]

  """All values less than the given value."""
  addedOn_lt: DateTime

  """All values less than or equal the given value."""
  addedOn_lte: DateTime

  """All values greater than the given value."""
  addedOn_gt: DateTime

  """All values greater than or equal the given value."""
  addedOn_gte: DateTime
  hop: IngredientWhereInput
}

input dryHopAdditionWhereUniqueInput {
  id: ID
}

type Graph implements Node {
  id: ID!
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcess!
  graphData(where: GraphDataWhereInput, orderBy: GraphDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GraphData!]
}

"""A connection to a list of items."""
type GraphConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GraphEdge]!
  aggregate: AggregateGraph!
}

input GraphCreateInput {
  id: ID
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcessCreateOneWithoutGraphsInput!
  graphData: GraphDataCreateManyWithoutGraphInput
}

input GraphCreateManyWithoutBrewingProcessInput {
  create: [GraphCreateWithoutBrewingProcessInput!]
  connect: [GraphWhereUniqueInput!]
}

input GraphCreateOneWithoutGraphDataInput {
  create: GraphCreateWithoutGraphDataInput
  connect: GraphWhereUniqueInput
}

input GraphCreateWithoutBrewingProcessInput {
  id: ID
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
  graphData: GraphDataCreateManyWithoutGraphInput
}

input GraphCreateWithoutGraphDataInput {
  id: ID
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcessCreateOneWithoutGraphsInput!
}

type GraphData implements Node {
  id: ID!
  time: DateTime!
  value: String!
  graph: Graph!
}

"""A connection to a list of items."""
type GraphDataConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GraphDataEdge]!
  aggregate: AggregateGraphData!
}

input GraphDataCreateInput {
  id: ID
  time: DateTime!
  value: String!
  graph: GraphCreateOneWithoutGraphDataInput!
}

input GraphDataCreateManyWithoutGraphInput {
  create: [GraphDataCreateWithoutGraphInput!]
  connect: [GraphDataWhereUniqueInput!]
}

input GraphDataCreateWithoutGraphInput {
  id: ID
  time: DateTime!
  value: String!
}

"""An edge in a connection."""
type GraphDataEdge {
  """The item at the end of the edge."""
  node: GraphData!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GraphDataOrderByInput {
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  value_ASC
  value_DESC
}

type GraphDataPreviousValues {
  id: ID!
  time: DateTime!
  value: String!
}

input GraphDataScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphDataScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphDataScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphDataScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type GraphDataSubscriptionPayload {
  mutation: MutationType!
  node: GraphData
  updatedFields: [String!]
  previousValues: GraphDataPreviousValues
}

input GraphDataSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphDataSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphDataSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphDataSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GraphDataWhereInput
}

input GraphDataUpdateInput {
  time: DateTime
  value: String
  graph: GraphUpdateOneRequiredWithoutGraphDataInput
}

input GraphDataUpdateManyDataInput {
  time: DateTime
  value: String
}

input GraphDataUpdateManyMutationInput {
  time: DateTime
  value: String
}

input GraphDataUpdateManyWithoutGraphInput {
  create: [GraphDataCreateWithoutGraphInput!]
  connect: [GraphDataWhereUniqueInput!]
  set: [GraphDataWhereUniqueInput!]
  disconnect: [GraphDataWhereUniqueInput!]
  delete: [GraphDataWhereUniqueInput!]
  update: [GraphDataUpdateWithWhereUniqueWithoutGraphInput!]
  updateMany: [GraphDataUpdateManyWithWhereNestedInput!]
  deleteMany: [GraphDataScalarWhereInput!]
  upsert: [GraphDataUpsertWithWhereUniqueWithoutGraphInput!]
}

input GraphDataUpdateManyWithWhereNestedInput {
  where: GraphDataScalarWhereInput!
  data: GraphDataUpdateManyDataInput!
}

input GraphDataUpdateWithoutGraphDataInput {
  time: DateTime
  value: String
}

input GraphDataUpdateWithWhereUniqueWithoutGraphInput {
  where: GraphDataWhereUniqueInput!
  data: GraphDataUpdateWithoutGraphDataInput!
}

input GraphDataUpsertWithWhereUniqueWithoutGraphInput {
  where: GraphDataWhereUniqueInput!
  update: GraphDataUpdateWithoutGraphDataInput!
  create: GraphDataCreateWithoutGraphInput!
}

input GraphDataWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphDataWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphDataWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphDataWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
  graph: GraphWhereInput
}

input GraphDataWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type GraphEdge {
  """The item at the end of the edge."""
  node: Graph!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GraphOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sensorName_ASC
  sensorName_DESC
  active_ASC
  active_DESC
  updateFrequency_ASC
  updateFrequency_DESC
}

type GraphPreviousValues {
  id: ID!
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
}

input GraphScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sensorName: String

  """All values that are not equal to given value."""
  sensorName_not: String

  """All values that are contained in given list."""
  sensorName_in: [String!]

  """All values that are not contained in given list."""
  sensorName_not_in: [String!]

  """All values less than the given value."""
  sensorName_lt: String

  """All values less than or equal the given value."""
  sensorName_lte: String

  """All values greater than the given value."""
  sensorName_gt: String

  """All values greater than or equal the given value."""
  sensorName_gte: String

  """All values containing the given string."""
  sensorName_contains: String

  """All values not containing the given string."""
  sensorName_not_contains: String

  """All values starting with the given string."""
  sensorName_starts_with: String

  """All values not starting with the given string."""
  sensorName_not_starts_with: String

  """All values ending with the given string."""
  sensorName_ends_with: String

  """All values not ending with the given string."""
  sensorName_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  updateFrequency: Int

  """All values that are not equal to given value."""
  updateFrequency_not: Int

  """All values that are contained in given list."""
  updateFrequency_in: [Int!]

  """All values that are not contained in given list."""
  updateFrequency_not_in: [Int!]

  """All values less than the given value."""
  updateFrequency_lt: Int

  """All values less than or equal the given value."""
  updateFrequency_lte: Int

  """All values greater than the given value."""
  updateFrequency_gt: Int

  """All values greater than or equal the given value."""
  updateFrequency_gte: Int
}

type GraphSubscriptionPayload {
  mutation: MutationType!
  node: Graph
  updatedFields: [String!]
  previousValues: GraphPreviousValues
}

input GraphSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GraphWhereInput
}

input GraphUpdateInput {
  name: String
  sensorName: String
  active: Boolean
  updateFrequency: Int
  brewingProcess: BrewingProcessUpdateOneRequiredWithoutGraphsInput
  graphData: GraphDataUpdateManyWithoutGraphInput
}

input GraphUpdateManyDataInput {
  name: String
  sensorName: String
  active: Boolean
  updateFrequency: Int
}

input GraphUpdateManyMutationInput {
  name: String
  sensorName: String
  active: Boolean
  updateFrequency: Int
}

input GraphUpdateManyWithoutBrewingProcessInput {
  create: [GraphCreateWithoutBrewingProcessInput!]
  connect: [GraphWhereUniqueInput!]
  set: [GraphWhereUniqueInput!]
  disconnect: [GraphWhereUniqueInput!]
  delete: [GraphWhereUniqueInput!]
  update: [GraphUpdateWithWhereUniqueWithoutBrewingProcessInput!]
  updateMany: [GraphUpdateManyWithWhereNestedInput!]
  deleteMany: [GraphScalarWhereInput!]
  upsert: [GraphUpsertWithWhereUniqueWithoutBrewingProcessInput!]
}

input GraphUpdateManyWithWhereNestedInput {
  where: GraphScalarWhereInput!
  data: GraphUpdateManyDataInput!
}

input GraphUpdateOneRequiredWithoutGraphDataInput {
  create: GraphCreateWithoutGraphDataInput
  connect: GraphWhereUniqueInput
  update: GraphUpdateWithoutGraphDataDataInput
  upsert: GraphUpsertWithoutGraphDataInput
}

input GraphUpdateWithoutBrewingProcessDataInput {
  name: String
  sensorName: String
  active: Boolean
  updateFrequency: Int
  graphData: GraphDataUpdateManyWithoutGraphInput
}

input GraphUpdateWithoutGraphDataDataInput {
  name: String
  sensorName: String
  active: Boolean
  updateFrequency: Int
  brewingProcess: BrewingProcessUpdateOneRequiredWithoutGraphsInput
}

input GraphUpdateWithWhereUniqueWithoutBrewingProcessInput {
  where: GraphWhereUniqueInput!
  data: GraphUpdateWithoutBrewingProcessDataInput!
}

input GraphUpsertWithoutGraphDataInput {
  update: GraphUpdateWithoutGraphDataDataInput!
  create: GraphCreateWithoutGraphDataInput!
}

input GraphUpsertWithWhereUniqueWithoutBrewingProcessInput {
  where: GraphWhereUniqueInput!
  update: GraphUpdateWithoutBrewingProcessDataInput!
  create: GraphCreateWithoutBrewingProcessInput!
}

input GraphWhereInput {
  """Logical AND on all given filters."""
  AND: [GraphWhereInput!]

  """Logical OR on all given filters."""
  OR: [GraphWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GraphWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sensorName: String

  """All values that are not equal to given value."""
  sensorName_not: String

  """All values that are contained in given list."""
  sensorName_in: [String!]

  """All values that are not contained in given list."""
  sensorName_not_in: [String!]

  """All values less than the given value."""
  sensorName_lt: String

  """All values less than or equal the given value."""
  sensorName_lte: String

  """All values greater than the given value."""
  sensorName_gt: String

  """All values greater than or equal the given value."""
  sensorName_gte: String

  """All values containing the given string."""
  sensorName_contains: String

  """All values not containing the given string."""
  sensorName_not_contains: String

  """All values starting with the given string."""
  sensorName_starts_with: String

  """All values not starting with the given string."""
  sensorName_not_starts_with: String

  """All values ending with the given string."""
  sensorName_ends_with: String

  """All values not ending with the given string."""
  sensorName_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  updateFrequency: Int

  """All values that are not equal to given value."""
  updateFrequency_not: Int

  """All values that are contained in given list."""
  updateFrequency_in: [Int!]

  """All values that are not contained in given list."""
  updateFrequency_not_in: [Int!]

  """All values less than the given value."""
  updateFrequency_lt: Int

  """All values less than or equal the given value."""
  updateFrequency_lte: Int

  """All values greater than the given value."""
  updateFrequency_gt: Int

  """All values greater than or equal the given value."""
  updateFrequency_gte: Int
  brewingProcess: BrewingProcessWhereInput
  graphData_every: GraphDataWhereInput
  graphData_some: GraphDataWhereInput
  graphData_none: GraphDataWhereInput
}

input GraphWhereUniqueInput {
  id: ID
}

type Ingredient implements Node {
  id: ID!
  type: IngredientType!
  name: String!
  amountGram: Float!
  details: String
}

"""A connection to a list of items."""
type IngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  type: IngredientType!
  name: String!
  amountGram: Float!
  details: String
}

input IngredientCreateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateOneInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
}

"""An edge in a connection."""
type IngredientEdge {
  """The item at the end of the edge."""
  node: Ingredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  amountGram_ASC
  amountGram_DESC
  details_ASC
  details_DESC
}

type IngredientPreviousValues {
  id: ID!
  type: IngredientType!
  name: String!
  amountGram: Float!
  details: String
}

input IngredientScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: IngredientType

  """All values that are not equal to given value."""
  type_not: IngredientType

  """All values that are contained in given list."""
  type_in: [IngredientType!]

  """All values that are not contained in given list."""
  type_not_in: [IngredientType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  amountGram: Float

  """All values that are not equal to given value."""
  amountGram_not: Float

  """All values that are contained in given list."""
  amountGram_in: [Float!]

  """All values that are not contained in given list."""
  amountGram_not_in: [Float!]

  """All values less than the given value."""
  amountGram_lt: Float

  """All values less than or equal the given value."""
  amountGram_lte: Float

  """All values greater than the given value."""
  amountGram_gt: Float

  """All values greater than or equal the given value."""
  amountGram_gte: Float
  details: String

  """All values that are not equal to given value."""
  details_not: String

  """All values that are contained in given list."""
  details_in: [String!]

  """All values that are not contained in given list."""
  details_not_in: [String!]

  """All values less than the given value."""
  details_lt: String

  """All values less than or equal the given value."""
  details_lte: String

  """All values greater than the given value."""
  details_gt: String

  """All values greater than or equal the given value."""
  details_gte: String

  """All values containing the given string."""
  details_contains: String

  """All values not containing the given string."""
  details_not_contains: String

  """All values starting with the given string."""
  details_starts_with: String

  """All values not starting with the given string."""
  details_not_starts_with: String

  """All values ending with the given string."""
  details_ends_with: String

  """All values not ending with the given string."""
  details_not_ends_with: String
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

enum IngredientType {
  MALT
  HOP
  YEAST
}

input IngredientUpdateDataInput {
  type: IngredientType
  name: String
  amountGram: Float
  details: String
}

input IngredientUpdateInput {
  type: IngredientType
  name: String
  amountGram: Float
  details: String
}

input IngredientUpdateManyDataInput {
  type: IngredientType
  name: String
  amountGram: Float
  details: String
}

input IngredientUpdateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueNestedInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
  deleteMany: [IngredientScalarWhereInput!]
  upsert: [IngredientUpsertWithWhereUniqueNestedInput!]
}

input IngredientUpdateManyMutationInput {
  type: IngredientType
  name: String
  amountGram: Float
  details: String
}

input IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput!
  data: IngredientUpdateManyDataInput!
}

input IngredientUpdateOneRequiredInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
  update: IngredientUpdateDataInput
  upsert: IngredientUpsertNestedInput
}

input IngredientUpdateWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateDataInput!
}

input IngredientUpsertNestedInput {
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientUpsertWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: IngredientType

  """All values that are not equal to given value."""
  type_not: IngredientType

  """All values that are contained in given list."""
  type_in: [IngredientType!]

  """All values that are not contained in given list."""
  type_not_in: [IngredientType!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  amountGram: Float

  """All values that are not equal to given value."""
  amountGram_not: Float

  """All values that are contained in given list."""
  amountGram_in: [Float!]

  """All values that are not contained in given list."""
  amountGram_not_in: [Float!]

  """All values less than the given value."""
  amountGram_lt: Float

  """All values less than or equal the given value."""
  amountGram_lte: Float

  """All values greater than the given value."""
  amountGram_gt: Float

  """All values greater than or equal the given value."""
  amountGram_gte: Float
  details: String

  """All values that are not equal to given value."""
  details_not: String

  """All values that are contained in given list."""
  details_in: [String!]

  """All values that are not contained in given list."""
  details_not_in: [String!]

  """All values less than the given value."""
  details_lt: String

  """All values less than or equal the given value."""
  details_lte: String

  """All values greater than the given value."""
  details_gt: String

  """All values greater than or equal the given value."""
  details_gte: String

  """All values containing the given string."""
  details_contains: String

  """All values not containing the given string."""
  details_not_contains: String

  """All values starting with the given string."""
  details_starts_with: String

  """All values not starting with the given string."""
  details_not_starts_with: String

  """All values ending with the given string."""
  details_ends_with: String

  """All values not ending with the given string."""
  details_not_ends_with: String
}

input IngredientWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MediaFile implements Node {
  id: ID!
  time: DateTime!
  publicIdentifier: String!
  mediaStream: MediaStream!
}

"""A connection to a list of items."""
type MediaFileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediaFileEdge]!
  aggregate: AggregateMediaFile!
}

input MediaFileCreateInput {
  id: ID
  time: DateTime!
  publicIdentifier: String!
  mediaStream: MediaStreamCreateOneWithoutMediaFilesInput!
}

input MediaFileCreateManyWithoutMediaStreamInput {
  create: [MediaFileCreateWithoutMediaStreamInput!]
  connect: [MediaFileWhereUniqueInput!]
}

input MediaFileCreateWithoutMediaStreamInput {
  id: ID
  time: DateTime!
  publicIdentifier: String!
}

"""An edge in a connection."""
type MediaFileEdge {
  """The item at the end of the edge."""
  node: MediaFile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediaFileOrderByInput {
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  publicIdentifier_ASC
  publicIdentifier_DESC
}

type MediaFilePreviousValues {
  id: ID!
  time: DateTime!
  publicIdentifier: String!
}

input MediaFileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaFileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaFileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaFileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  publicIdentifier: String

  """All values that are not equal to given value."""
  publicIdentifier_not: String

  """All values that are contained in given list."""
  publicIdentifier_in: [String!]

  """All values that are not contained in given list."""
  publicIdentifier_not_in: [String!]

  """All values less than the given value."""
  publicIdentifier_lt: String

  """All values less than or equal the given value."""
  publicIdentifier_lte: String

  """All values greater than the given value."""
  publicIdentifier_gt: String

  """All values greater than or equal the given value."""
  publicIdentifier_gte: String

  """All values containing the given string."""
  publicIdentifier_contains: String

  """All values not containing the given string."""
  publicIdentifier_not_contains: String

  """All values starting with the given string."""
  publicIdentifier_starts_with: String

  """All values not starting with the given string."""
  publicIdentifier_not_starts_with: String

  """All values ending with the given string."""
  publicIdentifier_ends_with: String

  """All values not ending with the given string."""
  publicIdentifier_not_ends_with: String
}

type MediaFileSubscriptionPayload {
  mutation: MutationType!
  node: MediaFile
  updatedFields: [String!]
  previousValues: MediaFilePreviousValues
}

input MediaFileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaFileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaFileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaFileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediaFileWhereInput
}

input MediaFileUpdateInput {
  time: DateTime
  publicIdentifier: String
  mediaStream: MediaStreamUpdateOneRequiredWithoutMediaFilesInput
}

input MediaFileUpdateManyDataInput {
  time: DateTime
  publicIdentifier: String
}

input MediaFileUpdateManyMutationInput {
  time: DateTime
  publicIdentifier: String
}

input MediaFileUpdateManyWithoutMediaStreamInput {
  create: [MediaFileCreateWithoutMediaStreamInput!]
  connect: [MediaFileWhereUniqueInput!]
  set: [MediaFileWhereUniqueInput!]
  disconnect: [MediaFileWhereUniqueInput!]
  delete: [MediaFileWhereUniqueInput!]
  update: [MediaFileUpdateWithWhereUniqueWithoutMediaStreamInput!]
  updateMany: [MediaFileUpdateManyWithWhereNestedInput!]
  deleteMany: [MediaFileScalarWhereInput!]
  upsert: [MediaFileUpsertWithWhereUniqueWithoutMediaStreamInput!]
}

input MediaFileUpdateManyWithWhereNestedInput {
  where: MediaFileScalarWhereInput!
  data: MediaFileUpdateManyDataInput!
}

input MediaFileUpdateWithoutMediaStreamDataInput {
  time: DateTime
  publicIdentifier: String
}

input MediaFileUpdateWithWhereUniqueWithoutMediaStreamInput {
  where: MediaFileWhereUniqueInput!
  data: MediaFileUpdateWithoutMediaStreamDataInput!
}

input MediaFileUpsertWithWhereUniqueWithoutMediaStreamInput {
  where: MediaFileWhereUniqueInput!
  update: MediaFileUpdateWithoutMediaStreamDataInput!
  create: MediaFileCreateWithoutMediaStreamInput!
}

input MediaFileWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaFileWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaFileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaFileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  time: DateTime

  """All values that are not equal to given value."""
  time_not: DateTime

  """All values that are contained in given list."""
  time_in: [DateTime!]

  """All values that are not contained in given list."""
  time_not_in: [DateTime!]

  """All values less than the given value."""
  time_lt: DateTime

  """All values less than or equal the given value."""
  time_lte: DateTime

  """All values greater than the given value."""
  time_gt: DateTime

  """All values greater than or equal the given value."""
  time_gte: DateTime
  publicIdentifier: String

  """All values that are not equal to given value."""
  publicIdentifier_not: String

  """All values that are contained in given list."""
  publicIdentifier_in: [String!]

  """All values that are not contained in given list."""
  publicIdentifier_not_in: [String!]

  """All values less than the given value."""
  publicIdentifier_lt: String

  """All values less than or equal the given value."""
  publicIdentifier_lte: String

  """All values greater than the given value."""
  publicIdentifier_gt: String

  """All values greater than or equal the given value."""
  publicIdentifier_gte: String

  """All values containing the given string."""
  publicIdentifier_contains: String

  """All values not containing the given string."""
  publicIdentifier_not_contains: String

  """All values starting with the given string."""
  publicIdentifier_starts_with: String

  """All values not starting with the given string."""
  publicIdentifier_not_starts_with: String

  """All values ending with the given string."""
  publicIdentifier_ends_with: String

  """All values not ending with the given string."""
  publicIdentifier_not_ends_with: String
  mediaStream: MediaStreamWhereInput
}

input MediaFileWhereUniqueInput {
  id: ID
}

type MediaStream implements Node {
  id: ID!
  mediaFilesName: String!
  brewingSteps: [BrewingStep!]!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcess!
  mediaFiles(where: MediaFileWhereInput, orderBy: MediaFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MediaFile!]
}

"""A connection to a list of items."""
type MediaStreamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MediaStreamEdge]!
  aggregate: AggregateMediaStream!
}

input MediaStreamCreatebrewingStepsInput {
  set: [BrewingStep!]
}

input MediaStreamCreateInput {
  id: ID
  mediaFilesName: String!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
  brewingSteps: MediaStreamCreatebrewingStepsInput
  brewingProcess: BrewingProcessCreateOneWithoutMediaStreamsInput!
  mediaFiles: MediaFileCreateManyWithoutMediaStreamInput
}

input MediaStreamCreateManyWithoutBrewingProcessInput {
  create: [MediaStreamCreateWithoutBrewingProcessInput!]
  connect: [MediaStreamWhereUniqueInput!]
}

input MediaStreamCreateOneWithoutMediaFilesInput {
  create: MediaStreamCreateWithoutMediaFilesInput
  connect: MediaStreamWhereUniqueInput
}

input MediaStreamCreateWithoutBrewingProcessInput {
  id: ID
  mediaFilesName: String!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
  brewingSteps: MediaStreamCreatebrewingStepsInput
  mediaFiles: MediaFileCreateManyWithoutMediaStreamInput
}

input MediaStreamCreateWithoutMediaFilesInput {
  id: ID
  mediaFilesName: String!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
  brewingSteps: MediaStreamCreatebrewingStepsInput
  brewingProcess: BrewingProcessCreateOneWithoutMediaStreamsInput!
}

"""An edge in a connection."""
type MediaStreamEdge {
  """The item at the end of the edge."""
  node: MediaStream!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MediaStreamOrderByInput {
  id_ASC
  id_DESC
  mediaFilesName_ASC
  mediaFilesName_DESC
  overwrite_ASC
  overwrite_DESC
  active_ASC
  active_DESC
  updateFrequency_ASC
  updateFrequency_DESC
}

type MediaStreamPreviousValues {
  id: ID!
  mediaFilesName: String!
  brewingSteps: [BrewingStep!]!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
}

input MediaStreamScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaStreamScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaStreamScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaStreamScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mediaFilesName: String

  """All values that are not equal to given value."""
  mediaFilesName_not: String

  """All values that are contained in given list."""
  mediaFilesName_in: [String!]

  """All values that are not contained in given list."""
  mediaFilesName_not_in: [String!]

  """All values less than the given value."""
  mediaFilesName_lt: String

  """All values less than or equal the given value."""
  mediaFilesName_lte: String

  """All values greater than the given value."""
  mediaFilesName_gt: String

  """All values greater than or equal the given value."""
  mediaFilesName_gte: String

  """All values containing the given string."""
  mediaFilesName_contains: String

  """All values not containing the given string."""
  mediaFilesName_not_contains: String

  """All values starting with the given string."""
  mediaFilesName_starts_with: String

  """All values not starting with the given string."""
  mediaFilesName_not_starts_with: String

  """All values ending with the given string."""
  mediaFilesName_ends_with: String

  """All values not ending with the given string."""
  mediaFilesName_not_ends_with: String
  overwrite: Boolean

  """All values that are not equal to given value."""
  overwrite_not: Boolean
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  updateFrequency: Int

  """All values that are not equal to given value."""
  updateFrequency_not: Int

  """All values that are contained in given list."""
  updateFrequency_in: [Int!]

  """All values that are not contained in given list."""
  updateFrequency_not_in: [Int!]

  """All values less than the given value."""
  updateFrequency_lt: Int

  """All values less than or equal the given value."""
  updateFrequency_lte: Int

  """All values greater than the given value."""
  updateFrequency_gt: Int

  """All values greater than or equal the given value."""
  updateFrequency_gte: Int
}

type MediaStreamSubscriptionPayload {
  mutation: MutationType!
  node: MediaStream
  updatedFields: [String!]
  previousValues: MediaStreamPreviousValues
}

input MediaStreamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaStreamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaStreamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaStreamSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MediaStreamWhereInput
}

input MediaStreamUpdatebrewingStepsInput {
  set: [BrewingStep!]
}

input MediaStreamUpdateInput {
  mediaFilesName: String
  overwrite: Boolean
  active: Boolean
  updateFrequency: Int
  brewingSteps: MediaStreamUpdatebrewingStepsInput
  brewingProcess: BrewingProcessUpdateOneRequiredWithoutMediaStreamsInput
  mediaFiles: MediaFileUpdateManyWithoutMediaStreamInput
}

input MediaStreamUpdateManyDataInput {
  mediaFilesName: String
  overwrite: Boolean
  active: Boolean
  updateFrequency: Int
  brewingSteps: MediaStreamUpdatebrewingStepsInput
}

input MediaStreamUpdateManyMutationInput {
  mediaFilesName: String
  overwrite: Boolean
  active: Boolean
  updateFrequency: Int
  brewingSteps: MediaStreamUpdatebrewingStepsInput
}

input MediaStreamUpdateManyWithoutBrewingProcessInput {
  create: [MediaStreamCreateWithoutBrewingProcessInput!]
  connect: [MediaStreamWhereUniqueInput!]
  set: [MediaStreamWhereUniqueInput!]
  disconnect: [MediaStreamWhereUniqueInput!]
  delete: [MediaStreamWhereUniqueInput!]
  update: [MediaStreamUpdateWithWhereUniqueWithoutBrewingProcessInput!]
  updateMany: [MediaStreamUpdateManyWithWhereNestedInput!]
  deleteMany: [MediaStreamScalarWhereInput!]
  upsert: [MediaStreamUpsertWithWhereUniqueWithoutBrewingProcessInput!]
}

input MediaStreamUpdateManyWithWhereNestedInput {
  where: MediaStreamScalarWhereInput!
  data: MediaStreamUpdateManyDataInput!
}

input MediaStreamUpdateOneRequiredWithoutMediaFilesInput {
  create: MediaStreamCreateWithoutMediaFilesInput
  connect: MediaStreamWhereUniqueInput
  update: MediaStreamUpdateWithoutMediaFilesDataInput
  upsert: MediaStreamUpsertWithoutMediaFilesInput
}

input MediaStreamUpdateWithoutBrewingProcessDataInput {
  mediaFilesName: String
  overwrite: Boolean
  active: Boolean
  updateFrequency: Int
  brewingSteps: MediaStreamUpdatebrewingStepsInput
  mediaFiles: MediaFileUpdateManyWithoutMediaStreamInput
}

input MediaStreamUpdateWithoutMediaFilesDataInput {
  mediaFilesName: String
  overwrite: Boolean
  active: Boolean
  updateFrequency: Int
  brewingSteps: MediaStreamUpdatebrewingStepsInput
  brewingProcess: BrewingProcessUpdateOneRequiredWithoutMediaStreamsInput
}

input MediaStreamUpdateWithWhereUniqueWithoutBrewingProcessInput {
  where: MediaStreamWhereUniqueInput!
  data: MediaStreamUpdateWithoutBrewingProcessDataInput!
}

input MediaStreamUpsertWithoutMediaFilesInput {
  update: MediaStreamUpdateWithoutMediaFilesDataInput!
  create: MediaStreamCreateWithoutMediaFilesInput!
}

input MediaStreamUpsertWithWhereUniqueWithoutBrewingProcessInput {
  where: MediaStreamWhereUniqueInput!
  update: MediaStreamUpdateWithoutBrewingProcessDataInput!
  create: MediaStreamCreateWithoutBrewingProcessInput!
}

input MediaStreamWhereInput {
  """Logical AND on all given filters."""
  AND: [MediaStreamWhereInput!]

  """Logical OR on all given filters."""
  OR: [MediaStreamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MediaStreamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  mediaFilesName: String

  """All values that are not equal to given value."""
  mediaFilesName_not: String

  """All values that are contained in given list."""
  mediaFilesName_in: [String!]

  """All values that are not contained in given list."""
  mediaFilesName_not_in: [String!]

  """All values less than the given value."""
  mediaFilesName_lt: String

  """All values less than or equal the given value."""
  mediaFilesName_lte: String

  """All values greater than the given value."""
  mediaFilesName_gt: String

  """All values greater than or equal the given value."""
  mediaFilesName_gte: String

  """All values containing the given string."""
  mediaFilesName_contains: String

  """All values not containing the given string."""
  mediaFilesName_not_contains: String

  """All values starting with the given string."""
  mediaFilesName_starts_with: String

  """All values not starting with the given string."""
  mediaFilesName_not_starts_with: String

  """All values ending with the given string."""
  mediaFilesName_ends_with: String

  """All values not ending with the given string."""
  mediaFilesName_not_ends_with: String
  overwrite: Boolean

  """All values that are not equal to given value."""
  overwrite_not: Boolean
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  updateFrequency: Int

  """All values that are not equal to given value."""
  updateFrequency_not: Int

  """All values that are contained in given list."""
  updateFrequency_in: [Int!]

  """All values that are not contained in given list."""
  updateFrequency_not_in: [Int!]

  """All values less than the given value."""
  updateFrequency_lt: Int

  """All values less than or equal the given value."""
  updateFrequency_lte: Int

  """All values greater than the given value."""
  updateFrequency_gt: Int

  """All values greater than or equal the given value."""
  updateFrequency_gte: Int
  brewingProcess: BrewingProcessWhereInput
  mediaFiles_every: MediaFileWhereInput
  mediaFiles_some: MediaFileWhereInput
  mediaFiles_none: MediaFileWhereInput
}

input MediaStreamWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createBrewingProcess(data: BrewingProcessCreateInput!): BrewingProcess!
  createGraph(data: GraphCreateInput!): Graph!
  createGraphData(data: GraphDataCreateInput!): GraphData!
  createMediaStream(data: MediaStreamCreateInput!): MediaStream!
  createMediaFile(data: MediaFileCreateInput!): MediaFile!
  createboilHopAddition(data: boilHopAdditionCreateInput!): boilHopAddition!
  createBrewingProcessDetails(data: BrewingProcessDetailsCreateInput!): BrewingProcessDetails!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createdryHopAddition(data: dryHopAdditionCreateInput!): dryHopAddition!
  createStep(data: StepCreateInput!): Step!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateBrewingProcess(data: BrewingProcessUpdateInput!, where: BrewingProcessWhereUniqueInput!): BrewingProcess
  updateGraph(data: GraphUpdateInput!, where: GraphWhereUniqueInput!): Graph
  updateGraphData(data: GraphDataUpdateInput!, where: GraphDataWhereUniqueInput!): GraphData
  updateMediaStream(data: MediaStreamUpdateInput!, where: MediaStreamWhereUniqueInput!): MediaStream
  updateMediaFile(data: MediaFileUpdateInput!, where: MediaFileWhereUniqueInput!): MediaFile
  updateboilHopAddition(data: boilHopAdditionUpdateInput!, where: boilHopAdditionWhereUniqueInput!): boilHopAddition
  updateBrewingProcessDetails(data: BrewingProcessDetailsUpdateInput!, where: BrewingProcessDetailsWhereUniqueInput!): BrewingProcessDetails
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updatedryHopAddition(data: dryHopAdditionUpdateInput!, where: dryHopAdditionWhereUniqueInput!): dryHopAddition
  updateStep(data: StepUpdateInput!, where: StepWhereUniqueInput!): Step
  deleteUser(where: UserWhereUniqueInput!): User
  deleteBrewingProcess(where: BrewingProcessWhereUniqueInput!): BrewingProcess
  deleteGraph(where: GraphWhereUniqueInput!): Graph
  deleteGraphData(where: GraphDataWhereUniqueInput!): GraphData
  deleteMediaStream(where: MediaStreamWhereUniqueInput!): MediaStream
  deleteMediaFile(where: MediaFileWhereUniqueInput!): MediaFile
  deleteboilHopAddition(where: boilHopAdditionWhereUniqueInput!): boilHopAddition
  deleteBrewingProcessDetails(where: BrewingProcessDetailsWhereUniqueInput!): BrewingProcessDetails
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deletedryHopAddition(where: dryHopAdditionWhereUniqueInput!): dryHopAddition
  deleteStep(where: StepWhereUniqueInput!): Step
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertBrewingProcess(where: BrewingProcessWhereUniqueInput!, create: BrewingProcessCreateInput!, update: BrewingProcessUpdateInput!): BrewingProcess!
  upsertGraph(where: GraphWhereUniqueInput!, create: GraphCreateInput!, update: GraphUpdateInput!): Graph!
  upsertGraphData(where: GraphDataWhereUniqueInput!, create: GraphDataCreateInput!, update: GraphDataUpdateInput!): GraphData!
  upsertMediaStream(where: MediaStreamWhereUniqueInput!, create: MediaStreamCreateInput!, update: MediaStreamUpdateInput!): MediaStream!
  upsertMediaFile(where: MediaFileWhereUniqueInput!, create: MediaFileCreateInput!, update: MediaFileUpdateInput!): MediaFile!
  upsertboilHopAddition(where: boilHopAdditionWhereUniqueInput!, create: boilHopAdditionCreateInput!, update: boilHopAdditionUpdateInput!): boilHopAddition!
  upsertBrewingProcessDetails(where: BrewingProcessDetailsWhereUniqueInput!, create: BrewingProcessDetailsCreateInput!, update: BrewingProcessDetailsUpdateInput!): BrewingProcessDetails!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertdryHopAddition(where: dryHopAdditionWhereUniqueInput!, create: dryHopAdditionCreateInput!, update: dryHopAdditionUpdateInput!): dryHopAddition!
  upsertStep(where: StepWhereUniqueInput!, create: StepCreateInput!, update: StepUpdateInput!): Step!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyBrewingProcesses(data: BrewingProcessUpdateManyMutationInput!, where: BrewingProcessWhereInput): BatchPayload!
  updateManyGraphs(data: GraphUpdateManyMutationInput!, where: GraphWhereInput): BatchPayload!
  updateManyGraphDatas(data: GraphDataUpdateManyMutationInput!, where: GraphDataWhereInput): BatchPayload!
  updateManyMediaStreams(data: MediaStreamUpdateManyMutationInput!, where: MediaStreamWhereInput): BatchPayload!
  updateManyMediaFiles(data: MediaFileUpdateManyMutationInput!, where: MediaFileWhereInput): BatchPayload!
  updateManyBoilHopAdditions(data: boilHopAdditionUpdateManyMutationInput!, where: boilHopAdditionWhereInput): BatchPayload!
  updateManyBrewingProcessDetailses(data: BrewingProcessDetailsUpdateManyMutationInput!, where: BrewingProcessDetailsWhereInput): BatchPayload!
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  updateManyDryHopAdditions(data: dryHopAdditionUpdateManyMutationInput!, where: dryHopAdditionWhereInput): BatchPayload!
  updateManySteps(data: StepUpdateManyMutationInput!, where: StepWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyBrewingProcesses(where: BrewingProcessWhereInput): BatchPayload!
  deleteManyGraphs(where: GraphWhereInput): BatchPayload!
  deleteManyGraphDatas(where: GraphDataWhereInput): BatchPayload!
  deleteManyMediaStreams(where: MediaStreamWhereInput): BatchPayload!
  deleteManyMediaFiles(where: MediaFileWhereInput): BatchPayload!
  deleteManyBoilHopAdditions(where: boilHopAdditionWhereInput): BatchPayload!
  deleteManyBrewingProcessDetailses(where: BrewingProcessDetailsWhereInput): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  deleteManyDryHopAdditions(where: dryHopAdditionWhereInput): BatchPayload!
  deleteManySteps(where: StepWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  brewingProcesses(where: BrewingProcessWhereInput, orderBy: BrewingProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrewingProcess]!
  graphs(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Graph]!
  graphDatas(where: GraphDataWhereInput, orderBy: GraphDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GraphData]!
  mediaStreams(where: MediaStreamWhereInput, orderBy: MediaStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MediaStream]!
  mediaFiles(where: MediaFileWhereInput, orderBy: MediaFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MediaFile]!
  boilHopAdditions(where: boilHopAdditionWhereInput, orderBy: boilHopAdditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [boilHopAddition]!
  brewingProcessDetailses(where: BrewingProcessDetailsWhereInput, orderBy: BrewingProcessDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrewingProcessDetails]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  dryHopAdditions(where: dryHopAdditionWhereInput, orderBy: dryHopAdditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [dryHopAddition]!
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step]!
  user(where: UserWhereUniqueInput!): User
  brewingProcess(where: BrewingProcessWhereUniqueInput!): BrewingProcess
  graph(where: GraphWhereUniqueInput!): Graph
  graphData(where: GraphDataWhereUniqueInput!): GraphData
  mediaStream(where: MediaStreamWhereUniqueInput!): MediaStream
  mediaFile(where: MediaFileWhereUniqueInput!): MediaFile
  boilHopAddition(where: boilHopAdditionWhereUniqueInput!): boilHopAddition
  brewingProcessDetails(where: BrewingProcessDetailsWhereUniqueInput!): BrewingProcessDetails
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  dryHopAddition(where: dryHopAdditionWhereUniqueInput!): dryHopAddition
  step(where: StepWhereUniqueInput!): Step
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  brewingProcessesConnection(where: BrewingProcessWhereInput, orderBy: BrewingProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrewingProcessConnection!
  graphsConnection(where: GraphWhereInput, orderBy: GraphOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphConnection!
  graphDatasConnection(where: GraphDataWhereInput, orderBy: GraphDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GraphDataConnection!
  mediaStreamsConnection(where: MediaStreamWhereInput, orderBy: MediaStreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaStreamConnection!
  mediaFilesConnection(where: MediaFileWhereInput, orderBy: MediaFileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaFileConnection!
  boilHopAdditionsConnection(where: boilHopAdditionWhereInput, orderBy: boilHopAdditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): boilHopAdditionConnection!
  brewingProcessDetailsesConnection(where: BrewingProcessDetailsWhereInput, orderBy: BrewingProcessDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BrewingProcessDetailsConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  dryHopAdditionsConnection(where: dryHopAdditionWhereInput, orderBy: dryHopAdditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): dryHopAdditionConnection!
  stepsConnection(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Step implements Node {
  id: ID!
  durationMinutes: Int!
  temperature: Float!
  details: String
  start: DateTime
  end: DateTime
}

"""A connection to a list of items."""
type StepConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StepEdge]!
  aggregate: AggregateStep!
}

input StepCreateInput {
  id: ID
  durationMinutes: Int!
  temperature: Float!
  details: String
  start: DateTime
  end: DateTime
}

input StepCreateManyInput {
  create: [StepCreateInput!]
  connect: [StepWhereUniqueInput!]
}

"""An edge in a connection."""
type StepEdge {
  """The item at the end of the edge."""
  node: Step!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StepOrderByInput {
  id_ASC
  id_DESC
  durationMinutes_ASC
  durationMinutes_DESC
  temperature_ASC
  temperature_DESC
  details_ASC
  details_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
}

type StepPreviousValues {
  id: ID!
  durationMinutes: Int!
  temperature: Float!
  details: String
  start: DateTime
  end: DateTime
}

input StepScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StepScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  durationMinutes: Int

  """All values that are not equal to given value."""
  durationMinutes_not: Int

  """All values that are contained in given list."""
  durationMinutes_in: [Int!]

  """All values that are not contained in given list."""
  durationMinutes_not_in: [Int!]

  """All values less than the given value."""
  durationMinutes_lt: Int

  """All values less than or equal the given value."""
  durationMinutes_lte: Int

  """All values greater than the given value."""
  durationMinutes_gt: Int

  """All values greater than or equal the given value."""
  durationMinutes_gte: Int
  temperature: Float

  """All values that are not equal to given value."""
  temperature_not: Float

  """All values that are contained in given list."""
  temperature_in: [Float!]

  """All values that are not contained in given list."""
  temperature_not_in: [Float!]

  """All values less than the given value."""
  temperature_lt: Float

  """All values less than or equal the given value."""
  temperature_lte: Float

  """All values greater than the given value."""
  temperature_gt: Float

  """All values greater than or equal the given value."""
  temperature_gte: Float
  details: String

  """All values that are not equal to given value."""
  details_not: String

  """All values that are contained in given list."""
  details_in: [String!]

  """All values that are not contained in given list."""
  details_not_in: [String!]

  """All values less than the given value."""
  details_lt: String

  """All values less than or equal the given value."""
  details_lte: String

  """All values greater than the given value."""
  details_gt: String

  """All values greater than or equal the given value."""
  details_gte: String

  """All values containing the given string."""
  details_contains: String

  """All values not containing the given string."""
  details_not_contains: String

  """All values starting with the given string."""
  details_starts_with: String

  """All values not starting with the given string."""
  details_not_starts_with: String

  """All values ending with the given string."""
  details_ends_with: String

  """All values not ending with the given string."""
  details_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
}

type StepSubscriptionPayload {
  mutation: MutationType!
  node: Step
  updatedFields: [String!]
  previousValues: StepPreviousValues
}

input StepSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StepSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StepWhereInput
}

input StepUpdateDataInput {
  durationMinutes: Int
  temperature: Float
  details: String
  start: DateTime
  end: DateTime
}

input StepUpdateInput {
  durationMinutes: Int
  temperature: Float
  details: String
  start: DateTime
  end: DateTime
}

input StepUpdateManyDataInput {
  durationMinutes: Int
  temperature: Float
  details: String
  start: DateTime
  end: DateTime
}

input StepUpdateManyInput {
  create: [StepCreateInput!]
  connect: [StepWhereUniqueInput!]
  set: [StepWhereUniqueInput!]
  disconnect: [StepWhereUniqueInput!]
  delete: [StepWhereUniqueInput!]
  update: [StepUpdateWithWhereUniqueNestedInput!]
  updateMany: [StepUpdateManyWithWhereNestedInput!]
  deleteMany: [StepScalarWhereInput!]
  upsert: [StepUpsertWithWhereUniqueNestedInput!]
}

input StepUpdateManyMutationInput {
  durationMinutes: Int
  temperature: Float
  details: String
  start: DateTime
  end: DateTime
}

input StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput!
  data: StepUpdateManyDataInput!
}

input StepUpdateWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput!
  data: StepUpdateDataInput!
}

input StepUpsertWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput!
  update: StepUpdateDataInput!
  create: StepCreateInput!
}

input StepWhereInput {
  """Logical AND on all given filters."""
  AND: [StepWhereInput!]

  """Logical OR on all given filters."""
  OR: [StepWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StepWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  durationMinutes: Int

  """All values that are not equal to given value."""
  durationMinutes_not: Int

  """All values that are contained in given list."""
  durationMinutes_in: [Int!]

  """All values that are not contained in given list."""
  durationMinutes_not_in: [Int!]

  """All values less than the given value."""
  durationMinutes_lt: Int

  """All values less than or equal the given value."""
  durationMinutes_lte: Int

  """All values greater than the given value."""
  durationMinutes_gt: Int

  """All values greater than or equal the given value."""
  durationMinutes_gte: Int
  temperature: Float

  """All values that are not equal to given value."""
  temperature_not: Float

  """All values that are contained in given list."""
  temperature_in: [Float!]

  """All values that are not contained in given list."""
  temperature_not_in: [Float!]

  """All values less than the given value."""
  temperature_lt: Float

  """All values less than or equal the given value."""
  temperature_lte: Float

  """All values greater than the given value."""
  temperature_gt: Float

  """All values greater than or equal the given value."""
  temperature_gte: Float
  details: String

  """All values that are not equal to given value."""
  details_not: String

  """All values that are contained in given list."""
  details_in: [String!]

  """All values that are not contained in given list."""
  details_not_in: [String!]

  """All values less than the given value."""
  details_lt: String

  """All values less than or equal the given value."""
  details_lte: String

  """All values greater than the given value."""
  details_gt: String

  """All values greater than or equal the given value."""
  details_gte: String

  """All values containing the given string."""
  details_contains: String

  """All values not containing the given string."""
  details_not_contains: String

  """All values starting with the given string."""
  details_starts_with: String

  """All values not starting with the given string."""
  details_not_starts_with: String

  """All values ending with the given string."""
  details_ends_with: String

  """All values not ending with the given string."""
  details_not_ends_with: String
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
}

input StepWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  brewingProcess(where: BrewingProcessSubscriptionWhereInput): BrewingProcessSubscriptionPayload
  graph(where: GraphSubscriptionWhereInput): GraphSubscriptionPayload
  graphData(where: GraphDataSubscriptionWhereInput): GraphDataSubscriptionPayload
  mediaStream(where: MediaStreamSubscriptionWhereInput): MediaStreamSubscriptionPayload
  mediaFile(where: MediaFileSubscriptionWhereInput): MediaFileSubscriptionPayload
  boilHopAddition(where: boilHopAdditionSubscriptionWhereInput): boilHopAdditionSubscriptionPayload
  brewingProcessDetails(where: BrewingProcessDetailsSubscriptionWhereInput): BrewingProcessDetailsSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  dryHopAddition(where: dryHopAdditionSubscriptionWhereInput): dryHopAdditionSubscriptionPayload
  step(where: StepSubscriptionWhereInput): StepSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  permissions: [Permission!]!
  participatingBrewingProcesses(where: BrewingProcessWhereInput, orderBy: BrewingProcessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BrewingProcess!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
  participatingBrewingProcesses: BrewingProcessCreateManyWithoutUsersInput
}

input UserCreateManyWithoutParticipatingBrewingProcessesInput {
  create: [UserCreateWithoutParticipatingBrewingProcessesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutParticipatingBrewingProcessesInput {
  id: ID
  email: String!
  name: String!
  password: String!
  permissions: UserCreatepermissionsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  password: String!
  permissions: [Permission!]!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
  participatingBrewingProcesses: BrewingProcessUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutParticipatingBrewingProcessesInput {
  create: [UserCreateWithoutParticipatingBrewingProcessesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutParticipatingBrewingProcessesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutParticipatingBrewingProcessesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutParticipatingBrewingProcessesDataInput {
  email: String
  name: String
  password: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateWithWhereUniqueWithoutParticipatingBrewingProcessesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutParticipatingBrewingProcessesDataInput!
}

input UserUpsertWithWhereUniqueWithoutParticipatingBrewingProcessesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutParticipatingBrewingProcessesDataInput!
  create: UserCreateWithoutParticipatingBrewingProcessesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  participatingBrewingProcesses_every: BrewingProcessWhereInput
  participatingBrewingProcesses_some: BrewingProcessWhereInput
  participatingBrewingProcesses_none: BrewingProcessWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
