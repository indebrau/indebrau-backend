type Query {
  # User Queries
  me: User
  users: [User]! # admin
  # Brewing Process Queries
  brewingProcesses: [BrewingProcess!]! # admin
  brewingProcess(id: ID!): BrewingProcess # admin and participating users
  # Graph Queries
  graphs(active: Boolean): [Graph!]! # admin, active is default set to false
  graph(id: ID!): Graph # admin
  sensors: [Sensor!]! # admin
  # Media Stream Queries
  mediaStreams(active: Boolean): [MediaStream!]! # admin
  mediaStream(id: ID!): MediaStream # admin and participating user
}

type Mutation {
  # User Mutations
  signup(email: String!, name: String!, password: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage!

  # Brewing Process Mutations (Admin)
  createBrewingProcess(
    name: String!
    startNow: Boolean # default: no
    description: String!
  ): BrewingProcess!

  advanceBrewingProcess(brewingProcessId: ID!): BrewingProcess!

  changeBottlesAvailable(
    brewingProcessId: ID!
    bottlesAvailable: Int!
  ): BrewingProcess!

  addUsersToBrewingProcess(
    brewingProcessId: ID!
    userIds: [ID!]!
  ): BrewingProcess!

  deleteBrewingProcess(id: ID!): SuccessMessage!

  # Sensor Mutations (Admin)
  createSensor(
    topic: String!
    name: String!
  ): SuccessMessage!

  deleteSensor(topic: String!): SuccessMessage!

  # Graph Mutations (Admin)
  createGraph(
    sensorTopic: String!
    updateFrequency: Int!
    brewingProcessId: ID!
    brewingStepName: StepName!
  ): Graph!

  deleteGraph(id: ID!): SuccessMessage!

  addSensorData(
    sensorTopic: String!
    sensorTimeStamp: DateTime!
    sensorValue: String!
  ): [GraphData!]!

  # MediaStream Mutations (Admin)
  createMediaStream(
    mediaFilesName: String!
    overwrite: Boolean!
    updateFrequency: Int!
    brewingProcessId: ID!
    brewingStepName: StepName!
  ): MediaStream!

  deleteMediaStream(id: ID!): SuccessMessage!
}

type User {
  id: ID!
  email: String!
  name: String!
  token: String! # instead of password
  permissions: [Permission!]!
  participatingBrewingProcesses: [BrewingProcess!]
}

type BrewingProcess {
  id: ID!
  name: String!
  description: String!
  start: DateTime
  end: DateTime
  bottlesAvailable: Int
  brewingSteps(active: Boolean): [BrewingStep!] # only active step returned
  participatingUsers: [User!]
}

type BrewingStep {
  id: ID!
  name: StepName!
  start: DateTime
  end: DateTime
  brewingProcess: BrewingProcess!
  graphs: [Graph!]
  mediaStreams: [MediaStream!]
}

type Sensor {
  topic: String!
  name: String!
  latestTimeStamp: DateTime
  latestValue: String
}

type Graph {
  id: ID!
  sensor: Sensor!
  updateFrequency: Int!
  brewingStep: BrewingStep!
  graphData(dataPoints: Int): [GraphData!]
}

type GraphData {
  id: ID!
  time: DateTime!
  value: String!
  graph: Graph!
}

type MediaStream {
  id: ID!
  mediaFilesName: String!
  overwrite: Boolean!
  updateFrequency: Int!
  brewingStep: BrewingStep!
  mediaFiles(dataPoints: Int): [MediaFile!]
}

type MediaFile {
  id: ID!
  time: DateTime!
  publicIdentifier: String!
  mimeType: MimeType!
  mediaStream: MediaStream!
}

type SuccessMessage {
  message: String!
}

scalar DateTime

enum StepName {
  PREPARING
  BREWING
  FERMENTING
  CONDITIONING
  BOTTLING
}

enum Permission {
  ADMIN
  USER
}

enum MimeType {
  IMAGE_PNG
  IMAGE_JPG
  IMAGE_JPEG
}
