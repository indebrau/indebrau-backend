type Query {
  me: User
  # admin
  graphs(
    data_points: Int
    active: Boolean # default false (if not set, return all graphs)
  ): [Graph!]!
  latestSensorData: [SensorData!]!
  graph(id: ID!, data_points: Int): Graph # admin and participating user
  # admin
  mediaStreams(
    active: Boolean # default false (if not set, return all mediaStreams)
  ): [MediaStream!]!
  mediaStream(id: ID!): MediaStream # admin and participating user
  brewingProcesses: [BrewingProcess!]! # admin
  brewingProcess(id: ID!): BrewingProcess # admin and participating users
}

type Mutation {
  signup(email: String!, name: String!, password: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage

  # admin
  addGraphData(
    sensor_name: String!
    sensor_time_stamp: DateTime!
    sensor_value: String!
  ): GraphData!

  # admin
  createGraph(
    name: String!
    sensor_name: String!
    update_frequency: Int!
    brewing_process_id: ID!
  ): Graph!

  # admin
  deleteGraph(id: ID!): Graph!

  # admin
  createMediaStream(
    media_files_name: String!
    overwrite: Boolean!
    update_frequency: Int!
    brewing_process_id: ID!
  ): ID!

  # admin
  deleteMediaStream(id: ID!): MediaStream!

  # admin
  createBrewingProcess(
    name: String!
    start_now: Boolean # default: no
    description: String!
  ): BrewingProcess!

  # admin
  advanceBrewingProcess(
    id: ID!
    new_active_steps: [BrewingStep!]!
  ): BrewingProcess!

  # admin
  deleteBrewingProcess(id: ID!): BrewingProcess!
}

type User {
  id: ID!
  email: String!
  name: String!
  token: String! #instead of password
  permissions: [Permission!]!
  UserToBrewingProcess: [BrewingProcess!]!
}

type BrewingProcess {
  id: ID!
  name: String!
  description: String!
  active_steps: [BrewingStep!]
  start: DateTime
  end: DateTime
  Graph: [Graph!]
  UserToBrewingProcess: [User!]
  MediaStream: [MediaStream!]
}

type SuccessMessage {
  message: String
}

type SensorData {
  sensor_name: String!
  sensor_time_stamp: DateTime!
  sensor_value: String!
}

type Graph {
  id: ID!
  name: String!
  sensor_name: String!
  active: Boolean!
  update_frequency: Int!
  BrewingProcess: BrewingProcess!
  GraphData: [GraphData!]
}

type GraphData {
  id: ID!
  time: DateTime!
  value: String!
  Graph: Graph!
}

type MediaStream {
  id: ID!
  media_files_name: String!
  overwrite: Boolean!
  active: Boolean!
  update_frequency: Int!
  BrewingProcess: BrewingProcess!
  MediaFile: [MediaFile!]
}

type MediaFile {
  id: ID!
  time: DateTime!
  public_identifier: String!
  mime_type: MimeType!
  MediaStream: MediaStream!
}

scalar DateTime

enum BrewingStep {
  MALT_CRUSHING
  HEATING_UP
  MASH_IN
  MASHING
  HEATING_SPARGE
  LAUTERING
  SPARGING
  BOILING
  CHILLING
  FERMENTING
  CONDITIONING
  BOTTLED
}

enum Permission {
  ADMIN
  USER
}

enum MimeType {
  IMAGE_PNG
  IMAGE_JPG
  IMAGE_JPEG
}
