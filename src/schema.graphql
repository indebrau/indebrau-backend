type Query {
  me: User
  # admin
  graphs(
    active: Boolean # default false (if not set, return all graphs)
  ): [Graph!]!
  latestSensorData: [SensorData!]!
  graph(id: ID!): Graph # admin and participating user
  # admin
  mediaStreams(
    active: Boolean # default false (if not set, return all mediaStreams)
  ): [MediaStream!]!
  mediaStream(id: ID!): MediaStream # admin and participating user
  brewingProcesses: [BrewingProcess!]! # admin
  brewingProcess(id: ID!): BrewingProcess # admin and participating users
}

type Mutation {
  signup(email: String!, name: String!, password: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage!

  # admin
  addGraphData(
    sensorName: String!
    sensorTimeStamp: DateTime!
    sensorValue: String!
  ): GraphData!

  # admin
  createGraph(
    name: String!
    sensorName: String!
    updateFrequency: Int!
    brewingProcessId: ID!
  ): Graph!

  # admin
  deleteGraph(id: ID!): SuccessMessage!

  # admin
  createMediaStream(
    mediaFilesName: String!
    overwrite: Boolean!
    updateFrequency: Int!
    brewingProcessId: ID!
  ): ID!

  # admin
  deleteMediaStream(id: ID!): SuccessMessage!

  # admin
  createBrewingProcess(
    name: String!
    startNow: Boolean # default: no
    description: String!
  ): BrewingProcess!

  # admin
  advanceBrewingProcess(
    id: ID!
    newActiveSteps: [BrewingStep!]!
  ): BrewingProcess!

  # admin
  deleteBrewingProcess(id: ID!): SuccessMessage!
}

type User {
  id: ID!
  email: String!
  name: String!
  token: String! #instead of password
  permissions: [Permission!]!
  participatingBrewingProcesses: [BrewingProcess!]
}

type BrewingProcess {
  id: ID!
  name: String!
  description: String!
  activeSteps: [BrewingStep!]
  start: DateTime
  end: DateTime
  graphs: [Graph!]
  participatingUsers: [User!]
  mediaStreams: [MediaStream!]
}

type SensorData {
  sensorName: String!
  sensorTimeStamp: DateTime!
  sensorValue: String!
}

type Graph {
  id: ID!
  name: String!
  sensorName: String!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcess!
  graphData(dataPoints: Int): [GraphData!]
}

type GraphData {
  id: ID!
  time: DateTime!
  value: String!
  graph: Graph!
}

type MediaStream {
  id: ID!
  mediaFilesName: String!
  overwrite: Boolean!
  active: Boolean!
  updateFrequency: Int!
  brewingProcess: BrewingProcess!
  mediaFiles: [MediaFile!]
}

type MediaFile {
  id: ID!
  time: DateTime!
  publicIdentifier: String!
  mimeType: MimeType!
  mediaStream: MediaStream!
}

type SuccessMessage {
  message: String!
}

scalar DateTime

enum BrewingStep {
  MALT_CRUSHING
  HEATING_UP
  MASH_IN
  MASHING
  HEATING_SPARGE
  LAUTERING
  SPARGING
  BOILING
  CHILLING
  FERMENTING
  CONDITIONING
  BOTTLED
}

enum Permission {
  ADMIN
  USER
}

enum MimeType {
  IMAGE_PNG
  IMAGE_JPG
  IMAGE_JPEG
}
