generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BrewingProcess {
  id                 Int                    @id @default(autoincrement())
  name               String
  description        String
  bottlesAvailable   Int?
  activeSteps        BrewingStep[]
  start              DateTime?
  end                DateTime?
  graphs             Graph[]
  mediaStreams       MediaStream[]
  participatingUsers UserToBrewingProcess[]
}

model Graph {
  id               Int             @id @default(autoincrement())
  name             String
  sensorName       String
  active           Boolean
  updateFrequency  Int
  brewingProcessId Int?
  brewingProcess   BrewingProcess? @relation(fields: [brewingProcessId], references: [id])
  graphData        GraphData[]
}

model GraphData {
  id      Int      @id @default(autoincrement())
  time    DateTime
  value   String
  graphId Int?
  graph   Graph?   @relation(fields: [graphId], references: [id])
}

model MediaFile {
  id               Int          @id @default(autoincrement())
  time             DateTime
  publicIdentifier String
  mimeType         MimeType[]
  mediaStreamId    Int?
  mediaStream      MediaStream? @relation(fields: [mediaStreamId], references: [id])
}

model MediaStream {
  id               Int             @id @default(autoincrement())
  mediaFilesName   String
  overwrite        Boolean
  active           Boolean
  updateFrequency  Int
  brewingProcessId Int?
  brewingProcess   BrewingProcess? @relation(fields: [brewingProcessId], references: [id])
  mediaFiles       MediaFile[]
}

model User {
  id                            Int                    @id @default(autoincrement())
  email                         String                 @unique
  name                          String
  password                      String
  permissions                   Permission[]
  participatingBrewingProcesses UserToBrewingProcess[]
}

model UserToBrewingProcess {
  id               Int             @id @default(autoincrement())
  userId           Int?
  brewingProcessId Int?
  brewingProcess   BrewingProcess? @relation(fields: [brewingProcessId], references: [id])
  user             User?           @relation(fields: [userId], references: [id])

  @@unique([userId, brewingProcessId], name: "UserToBrewingProcess_userId_brewingProcessId_key")
}

enum BrewingStep {
  BOILING
  BOTTLED
  CHILLING
  CONDITIONING
  FERMENTING
  HEATING_SPARGE
  HEATING_UP
  MALT_CRUSHING
  MASHING
  MASH_IN
  SPARGING
}

enum MimeType {
  IMAGE_JPEG
  IMAGE_JPG
  IMAGE_PNG
}

enum Permission {
  ADMIN
  USER
}
