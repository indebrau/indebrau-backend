generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BrewingProcess {
  id                 Int                    @id @default(autoincrement())
  name               String
  description        String
  bottlesAvailable   Int?
  start              DateTime?
  end                DateTime?
  brewingSteps       BrewingStep[]
  participatingUsers UserToBrewingProcess[]
}

model Graph {
  id              Int          @id @default(autoincrement())
  sensorName      String
  updateFrequency Int
  brewingStepId   Int?
  brewingStep     BrewingStep? @relation(fields: [brewingStepId], references: [id])
  graphData       GraphData[]
}

model GraphData {
  id      Int      @id @default(autoincrement())
  time    DateTime
  value   String
  graphId Int?
  graph   Graph?   @relation(fields: [graphId], references: [id])
}

model MediaFile {
  id               Int          @id @default(autoincrement())
  time             DateTime
  publicIdentifier String
  mimeType         MimeType[]
  mediaStreamId    Int?
  mediaStream      MediaStream? @relation(fields: [mediaStreamId], references: [id])
}

model MediaStream {
  id              Int          @id @default(autoincrement())
  mediaFilesName  String
  overwrite       Boolean
  updateFrequency Int
  brewingStepId   Int?
  brewingStep     BrewingStep? @relation(fields: [brewingStepId], references: [id])
  mediaFiles      MediaFile[]
}

model User {
  id                            Int                    @id @default(autoincrement())
  email                         String                 @unique
  name                          String
  password                      String
  permissions                   Permission[]
  participatingBrewingProcesses UserToBrewingProcess[]
}

model UserToBrewingProcess {
  id               Int             @id @default(autoincrement())
  userId           Int?
  brewingProcessId Int?
  brewingProcess   BrewingProcess? @relation(fields: [brewingProcessId], references: [id])
  user             User?           @relation(fields: [userId], references: [id])

  @@unique([userId, brewingProcessId], name: "UserToBrewingProcess_userId_brewingProcessId_key")
}

model BrewingStep {
  id               Int             @id @default(autoincrement())
  name             StepName
  start            DateTime?
  end              DateTime?
  brewingProcessId Int?
  brewingProcess   BrewingProcess? @relation(fields: [brewingProcessId], references: [id])
  graphs           Graph[]
  mediaStreams     MediaStream[]
}

enum MimeType {
  IMAGE_PNG
  IMAGE_JPG
  IMAGE_JPEG
}

enum Permission {
  ADMIN
  USER
}

enum StepName {
  PREPARING
  BREWING
  FERMENTING
  CONDITIONING
  BOTTLING
}
